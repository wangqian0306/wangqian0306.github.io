<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乾</title>
  <icon>https://www.gravatar.com/avatar/6594e632497433aebdd36c36ccc32c7f</icon>
  
  <link href="https://wangqian0306.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangqian0306.github.io/"/>
  <updated>2025-02-10T07:45:30.739Z</updated>
  <id>https://wangqian0306.github.io/</id>
  
  <author>
    <name>WangQian</name>
    <email>wangqian8963@gmial.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>摄像头视频流</title>
    <link href="https://wangqian0306.github.io/2025/camera/"/>
    <id>https://wangqian0306.github.io/2025/camera/</id>
    <published>2025-01-22T13:32:58.000Z</published>
    <updated>2025-02-10T07:45:30.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="摄像头视频流">摄像头视频流</h2><h3 id="简介">简介</h3><p>在工作中遇到了云台控制和视频接入的相关需求，此处针对相关内容进行了初步的整理。</p><h3 id="读取视频流">读取视频流</h3><p>可以通过如下方式读取摄像头的 RTSP 协议视频信号，需要注意的是登录摄像头的配置网站明确端口和认证方式。</p><h4 id="OpenCV">OpenCV</h4><p>使用如下命令安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install opencv-python<br></code></pre></td></tr></table></figure><p>使用如下代码即可读取视频流：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment"># RTSP URL ，请替换为你的实际 URL ，默认可以使用 1 作为 channel</span><br>rtsp_url = <span class="hljs-string">&quot;rtsp://&lt;username&gt;:&lt;password&gt;@&lt;ip_address&gt;:&lt;port&gt;/Streaming/Channels/&lt;channel&gt;&quot;</span><br><br><span class="hljs-comment"># 创建一个VideoCapture对象</span><br>cap = cv2.VideoCapture(rtsp_url)<br><br><span class="hljs-comment"># 检查是否成功打开视频流</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cap.isOpened():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法打开RTSP流&quot;</span>)<br>    exit()<br><br><span class="hljs-comment"># 循环读取视频帧</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 获取一帧</span><br>    ret, frame = cap.read()<br>    <br>    <span class="hljs-comment"># 如果读取失败，跳出循环</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法接收帧 (流结束?). 退出.&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <br>    <span class="hljs-comment"># 显示结果帧</span><br>    cv2.imshow(<span class="hljs-string">&#x27;Frame&#x27;</span>, frame)<br>    <br>    <span class="hljs-comment"># 按&#x27;q&#x27;键退出循环</span><br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 完成后释放捕捉器和关闭所有窗口</span><br>cap.release()<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><h3 id="控制云台">控制云台</h3><p>可以通过如下方式控制云台，需要注意的是登录摄像头的配置网站明确端口和认证方式。</p><p>基本的控制逻辑是采用 ONVIF 协议，在海康威视摄像头上需要摄像机启用集成协议，具体文档如下：</p><p><a href="https://knowbot.hikvision.com/webchatbot-pc/#/sharingPath?params=379537&amp;sysNum=1693447044565&amp;type=0">摄像机开启ONVIF协议</a></p><p>简单说就是：</p><ul><li>开启开放型网络视频接口<ul><li>认证方式为 digest/wsse 或 Digest&amp;ws-username token</li></ul></li><li>创建独立用户<ul><li>选择权限为管理员</li></ul></li></ul><h4 id="onviz-zeep">onviz-zeep</h4><p>使用如下命令安装相关依赖库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install zeep<br>pip install onvif_zeep<br></code></pre></td></tr></table></figure><p>然后使用如下代码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> onvif <span class="hljs-keyword">import</span> ONVIFCamera<br><br><span class="hljs-comment"># 摄像头的IP地址、端口、用户名和密码</span><br>ip_address = <span class="hljs-string">&#x27;xxx.xxx.xxx.xxx&#x27;</span><br>port = <span class="hljs-number">80</span><br>username = <span class="hljs-string">&#x27;xxx&#x27;</span><br>password = <span class="hljs-string">&#x27;xxx&#x27;</span><br><br><span class="hljs-comment"># 创建ONVIFCamera实例</span><br>mycam = ONVIFCamera(ip_address, port, username, password)<br><br><span class="hljs-comment"># 获取PTZ服务对象</span><br>ptz = mycam.create_ptz_service()<br><br><span class="hljs-comment"># 获取 Media service 对象并得到配置文件</span><br>media = mycam.create_media_service()<br><br><span class="hljs-comment"># 获取配置信息</span><br>media_profile = media.GetProfiles()[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 构建请求对象</span><br>request = ptz.create_type(<span class="hljs-string">&#x27;GetConfigurationOptions&#x27;</span>)<br>request.ConfigurationToken = media_profile.PTZConfiguration.token<br>ptz_configuration_options = ptz.GetConfigurationOptions(request)<br>request = ptz.create_type(<span class="hljs-string">&#x27;ContinuousMove&#x27;</span>)<br>request.ProfileToken = media_profile.token<br><br><span class="hljs-comment"># 发送转动停止信号</span><br>ptz.Stop(&#123;<span class="hljs-string">&#x27;ProfileToken&#x27;</span>: media_profile.token&#125;)<br><br><span class="hljs-comment"># 转动请求配置，x 和 y 都是 0-1.0 的数字</span><br>request.Velocity = &#123;<br>    <span class="hljs-string">&#x27;PanTilt&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">0.5</span>,<br>        <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 发送转动请求</span><br>ptz.ContinuousMove(request)<br><span class="hljs-comment"># 延迟等待云台转动</span><br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 发送转动停止信号</span><br>ptz.Stop(&#123;<span class="hljs-string">&#x27;ProfileToken&#x27;</span>: media_profile.token&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Ocean" scheme="https://wangqian0306.github.io/categories/Ocean/"/>
    
    
    <category term="Python" scheme="https://wangqian0306.github.io/tags/Python/"/>
    
    <category term="OpenCV" scheme="https://wangqian0306.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>qrcode</title>
    <link href="https://wangqian0306.github.io/2025/qrcode/"/>
    <id>https://wangqian0306.github.io/2025/qrcode/</id>
    <published>2025-01-15T14:26:13.000Z</published>
    <updated>2025-01-15T08:28:13.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="qrcode">qrcode</h2><h3 id="简介">简介</h3><p>使用 python-qrcode 库可以生成二维码。</p><h3 id="使用方式">使用方式</h3><p>使用如下命令安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install <span class="hljs-string">&quot;qrcode[pil]&quot;</span><br></code></pre></td></tr></table></figure><p>使用如下代码即可生成基本的二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_to_qr</span>(<span class="hljs-params">text, filename</span>):<br>    qr = qrcode.QRCode(<br>        version=<span class="hljs-number">1</span>,<br>        error_correction=qrcode.constants.ERROR_CORRECT_L,<br>        box_size=<span class="hljs-number">10</span>,<br>        border=<span class="hljs-number">4</span>,<br>    )<br>    qr.add_data(text)<br>    qr.make(fit=<span class="hljs-literal">True</span>)<br>    img = qr.make_image(fill_color=<span class="hljs-string">&quot;black&quot;</span>, back_color=<span class="hljs-string">&quot;white&quot;</span>)<br>    img.save(filename)<br></code></pre></td></tr></table></figure><p>将图片放在二维码中间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> qrcode<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_qr_with_logo</span>(<span class="hljs-params">data, logo_path, output_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generates a QR code with a custom logo in the center.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        data: The data to encode in the QR code (string).</span><br><span class="hljs-string">        logo_path: Path to the logo image (string).</span><br><span class="hljs-string">        output_path: Path to save the generated QR code (string).</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Create QR code instance</span><br>        qr = qrcode.QRCode(<br>            version=<span class="hljs-number">1</span>,  <span class="hljs-comment"># Adjust version for more data</span><br>            error_correction=qrcode.constants.ERROR_CORRECT_H,  <span class="hljs-comment"># High error correction</span><br>            box_size=<span class="hljs-number">10</span>,<br>            border=<span class="hljs-number">4</span>,<br>        )<br>        qr.add_data(data)<br>        qr.make(fit=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># Create an image from the QR code</span><br>        qr_image = qr.make_image(fill_color=<span class="hljs-string">&quot;black&quot;</span>, back_color=<span class="hljs-string">&quot;white&quot;</span>).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br><br>        <span class="hljs-comment"># Open the logo image</span><br>        logo = Image.<span class="hljs-built_in">open</span>(logo_path).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br><br>        <span class="hljs-comment"># Calculate logo size (adjust as needed)</span><br>        logo_size = <span class="hljs-built_in">int</span>(qr_image.size[<span class="hljs-number">0</span>] * <span class="hljs-number">0.2</span>)  <span class="hljs-comment"># 20% of QR code size</span><br><br>        <span class="hljs-comment"># Resize the logo</span><br>        logo = logo.resize((logo_size, logo_size), Image.LANCZOS)<br><br>        <span class="hljs-comment"># Calculate logo position</span><br>        position = ((qr_image.size[<span class="hljs-number">0</span>] - logo.size[<span class="hljs-number">0</span>]) // <span class="hljs-number">2</span>, (qr_image.size[<span class="hljs-number">1</span>] - logo.size[<span class="hljs-number">1</span>]) // <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># Paste the logo onto the QR code</span><br>        qr_image.paste(logo, position)<br><br>        <span class="hljs-comment"># Save the QR code</span><br>        qr_image.save(output_path)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;QR code with logo saved to <span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: Logo file not found at <span class="hljs-subst">&#123;logo_path&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data_to_encode = <span class="hljs-string">&quot;&lt;data&gt;&quot;</span><br>    logo_file = <span class="hljs-string">&quot;logo.png&quot;</span><br>    output_file = <span class="hljs-string">&quot;qrcode_with_logo.png&quot;</span><br>    generate_qr_with_logo(data_to_encode, logo_file, output_file)<br></code></pre></td></tr></table></figure><blockquote><p>注：其它用例参照官方项目。</p></blockquote><h3 id="参考资料">参考资料</h3><p><a href="https://github.com/lincolnloop/python-qrcode">官方项目</a></p><p><a href="https://pypi.org/project/qrcode/">PyPI qrcode</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="QR Code" scheme="https://wangqian0306.github.io/tags/QR-Code/"/>
    
  </entry>
  
  <entry>
    <title>生成激活码</title>
    <link href="https://wangqian0306.github.io/2025/activation/"/>
    <id>https://wangqian0306.github.io/2025/activation/</id>
    <published>2025-01-02T14:26:13.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="生成激活码">生成激活码</h2><h3 id="实现方式">实现方式</h3><p>使用 Java 自带的 SecureRandom 类可以生成随机码，用于实现卡券等功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivationCodeUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COMPLEX_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SIMPLE_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0123456789&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SWITCH_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CODE_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_TICKET_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;String&gt; <span class="hljs-title function_">generate</span><span class="hljs-params">(Integer num)</span> &#123;<br>        <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>        Set&lt;String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (result.size() &lt; num) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">codeSet</span> <span class="hljs-operator">=</span> num &lt; SWITCH_SIZE ? SIMPLE_CODE : COMPLEX_CODE;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">activationCode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; CODE_LENGTH; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> random.nextInt(codeSet.length());<br>                activationCode.append(codeSet.charAt(index));<br>            &#125;<br>            result.add(activationCode.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Java" scheme="https://wangqian0306.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://wangqian0306.github.io/2024/mybatis/"/>
    <id>https://wangqian0306.github.io/2024/mybatis/</id>
    <published>2024-12-25T13:32:58.000Z</published>
    <updated>2025-01-08T02:56:21.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MyBatis">MyBatis</h2><h3 id="简介">简介</h3><p>MyBatis 是一款为了让服务更好使用关系型数据库的框架。</p><h3 id="使用方式">使用方式</h3><p>至少引入如下依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4&#x27;</span><br>    compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    annotationProcessor <span class="hljs-string">&#x27;org.projectlombok:lombok&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4&#x27;</span><br>    runtimeOnly <span class="hljs-string">&#x27;com.mysql:mysql-connector-j&#x27;</span><br>    testRuntimeOnly <span class="hljs-string">&#x27;org.junit.platform:junit-platform-launcher&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后编写如下配置 <code>application.yaml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://xxx.xxx.xxx.xxx:3306/sakila</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xxxx</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxx</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>注：此处为了便捷选了 MySQL 提供的示例数据库 <a href="https://dev.mysql.com/doc/index-other.html">sakila</a> 。</p></blockquote><p>之后编写如下代码 <code>Actor.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer actorId;<br><br>    <span class="hljs-keyword">private</span> String firstName;<br><br>    <span class="hljs-keyword">private</span> String lastName;<br><br>    <span class="hljs-keyword">private</span> LocalDateTime lastUpdate;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后编写 <code>ActorMapper.java</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActorMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;SELECT * FROM actor&quot;)</span><br>    List&lt;Actor&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>之后修改主类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActorMapper actorMapper;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Application</span><span class="hljs-params">(ActorMapper actorMapper)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actorMapper = actorMapper;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.actorMapper.findAll());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他插件">其他插件</h3><h4 id="MyBatis-Generator">MyBatis Generator</h4><p>从 Maven 上直接下载 mybatis-generator-core 的 jar 包和数据库驱动包，然后将其放置在同一目录下。</p><p>之后结合实际场景修改配置文件即可，样例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;mysql-connector-j-9.1.0.jar&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://xxx.xxx.xxx.xxx:3306/sakila?useSSL=false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;xxxx&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;xxxx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span> &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;test.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;test.xml&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;test.dao&quot;</span>  <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">schema</span>=<span class="hljs-string">&quot;sakila&quot;</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;actor&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Actor&quot;</span>/&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://www.marcobehler.com/guides/java-databases">Java &amp; Databases: An Overview of Libraries &amp; APIs</a></p><p><a href="https://mybatis.org/mybatis-3/">官方网站</a></p><p><a href="https://github.com/mybatis/mybatis-3">官方项目</a></p><p><a href="https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples">示例代码</a></p><p><a href="https://mybatis.org/generator/">MyBatis Generator</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Spring" scheme="https://wangqian0306.github.io/categories/Spring/"/>
    
    
    <category term="Java" scheme="https://wangqian0306.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://wangqian0306.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>CMS</title>
    <link href="https://wangqian0306.github.io/2024/cms/"/>
    <id>https://wangqian0306.github.io/2024/cms/</id>
    <published>2024-12-24T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CMS">CMS</h2><h3 id="简介">简介</h3><p>CMS (Content Management System，内容管理系统)是一种软件平台，用于创建、管理和修改数字内容，通常用于网站内容的管理和发布。它使得没有技术背景的用户也能轻松地创建、编辑和管理网站内容，而不需要编写代码。</p><p>在这类产品中 Strapi 的自托管方式是完全免费的。</p><h3 id="使用方式">使用方式</h3><p>首先需要搭建一个数据库用来存储数据文件，通过本地或是线上服务商都可以。之后需要创建数据库 <code>strapi</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-operator">&lt;</span>dbname<span class="hljs-operator">&gt;</span><br>  <span class="hljs-keyword">CHARACTER SET</span> utf8mb4<br>  <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;<br></code></pre></td></tr></table></figure><p>然后就可以新建项目了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx create-strapi@latest<br></code></pre></td></tr></table></figure><blockquote><p>注：安装依赖的时间会比较长，此处 不要按回车键 。</p></blockquote><p>按照提示创建项目即可。</p><p>创建完成后可以使用如下命令启动服务，进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br>npm run start<br></code></pre></td></tr></table></figure><h3 id="统一部署">统一部署</h3><p>可以使用如下方式进行部署，编写项目 <code>Dockerfile</code> :</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">18</span>-alpine<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package*.json ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-keyword">ENV</span> NODE_ENV=production<br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>记得新建 <code>.dockerignore</code> 文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">node_modules<br>README.md<br></code></pre></td></tr></table></figure><p>之后即可修改数据库容器的 <code>docker-compose.yaml</code> 文件即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">example</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql:/var/lib/mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>  <span class="hljs-attr">strapi:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">../demo</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">demo/strapi:latest</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">DATABASE_HOST:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;1337:1337&quot;</span><br></code></pre></td></tr></table></figure><p>之后使用 <code>docker-compose up -d</code> 更新服务，就可以访问到管理页面了。</p><h3 id="参考资料">参考资料</h3><p><a href="https://docs.strapi.io/">官方文档</a></p><p><a href="https://github.com/strapi/strapi">官方项目</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://wangqian0306.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="CMS" scheme="https://wangqian0306.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 优化</title>
    <link href="https://wangqian0306.github.io/2024/mysql-optimization/"/>
    <id>https://wangqian0306.github.io/2024/mysql-optimization/</id>
    <published>2024-12-09T14:12:59.000Z</published>
    <updated>2025-01-08T02:56:21.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL-优化">MySQL 优化</h2><h3 id="简介">简介</h3><p>数据库性能取决于数据库中的几个因素 级别，例如 tables、queries 和 configuration settings。这些软件结构导致硬件级别产生不同的 CPU 指令和 I/O 操作，为了优化性能需要将操作数进可能缩减。在提高数据库性能时，首先需要试用设计上的基础规则和软件的指导手册，并采用时间所为评判工具来进行优化。想成为专家，可以更多地了解软件内部发生的事情， 并开始测量 CPU 周期和 I/O 操作等内容。</p><p>典型用户的目标是从其现有的软件和硬件配置中获得最佳数据库性能。高级用户寻找机会改进 MySQL 软件本身，或开发自己的存储引擎和硬件设备来扩展 MySQL 生态系统。在官方文档中针对优化方式进行了如下分类：</p><ul><li>在数据库级别进行优化</li><li>在硬件级别进行优化</li><li>平衡可移植性和性能(略)</li></ul><h3 id="在数据库级别进行优化">在数据库级别进行优化</h3><p>从基础设计上进行优化是最主要的提升方向，具体项目如下：</p><ul><li>表结构(tables structure)</li><li>索引(indexes)</li><li>存储引擎(storage engine)</li><li>行格式(row format)</li><li>锁策略(locking strategy)</li><li>缓存大小(memory areas used for caching)</li></ul><p>在上述优化执行前可以先考虑通过优化 SQL 的角度来提升检索速度。</p><h4 id="优化-SQL-语句">优化 SQL 语句</h4><p>在优化 SQL 时主要遵循的思路是：</p><ul><li>利用索引</li><li>隔离并优化查询的任何部分</li><li>减少全表扫描</li><li>让优化器读取到最新的表结构</li><li>了解存储引擎的优化技术、索引技术和配置参数</li><li>调整 MySQL 缓存中关于内存区域的大小和配置</li><li>减少缓存的大小</li><li>处理锁的问题</li></ul><blockquote><p>注：由于此处内容过多且杂乱，此时暂不整理。如有需求请参照 <a href="https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html">Optimizing SQL Statements</a></p></blockquote><h4 id="优化索引">优化索引</h4><p>大多数 MySQL 索引(PRIMARY KEY ,UNIQUE ,INDEX, FULLTEXT)存储在 B 树(B-Trees,统称，一般应该是 B+ 树)。例外： SPECIAL 类型的索引使用 R 树; MEMORY table 还支持哈希索引; InnoDB 对 FULLTEXT 索引使用倒排索引。</p><p>在索引使用上遵循如下规则：</p><ul><li>如果有多列索引，检索时要从左往右进行索引拼接。</li><li>如果需要跨表，最好让链接列具有相同的数据类型和大小且如果是字符串需要相同的字符集。</li><li>如果是 SPATIAL 索引需要指定 SRID(Spatial Reference System Identifier, 例如：EPSG:4326)。</li><li>在遇到非二进制数据时需要确保字段编码后长度小于 767 字节。</li></ul><p>在检索时可以使用 Explain 语句查看检索方式，优化查询逻辑。</p><p>MySQL 存储引擎还会通过读取表统计信息的方式来对查询进行优化，索引对应的数据条目数如果太多则 MySQL 可能不会使用该索引。索引对应的数据条目数可以通过 <code>SHOW INDEX</code> 语句查看，它会显示基于 N/S 的基数值，其中 N 是表中的行数，S 是索引对应的数据条目大小。</p><p>在使用索引时 InnoDB 存储引擎默认打开了索引扩展功能，在优化器中会执行索引扩展操作，将二级索引拼接在主键前，在使用时可以检查是否采用此功能。</p><p>为了减少数据扫描，可以在创建索引时指定排序方式，例如：<code>CREATE INDEX idx_name ON table_name (col1 ASC ,col2 DESC)</code>。</p><blockquote><p>注：在进行索引优化时如果表比较大删除和重新添加索引的成本会很高，此时可以先将其设置为隐形索引，然后再去检查 optimizer 是否使用隐形索引做检索条件，将其关闭即可进行测试。</p></blockquote><h4 id="优化数据结构">优化数据结构</h4><p>数据结构的优化要安排在设计阶段，目的是将表使用的数据空间尽可能缩小。此时花费的内存也会减少，并且索引也会相对较小检索速度也就会提升。</p><p>MySQL 支持许多不同的存储引擎(表类型)和 行格式。对于每个表，可以单独指定存储引擎和要使用的索引方法。</p><p>主要的方法如下：</p><ul><li>表列(Table Columns)<ul><li>选择合适的数据类型，比方说 MEDIUMINT 比 INT 使用的空间少 25%。</li><li>如有可能，请将列设置为 NOT NULL。它支持更好的使用索引并消除测试每个值为 NULL 的开销并缩减 1 位的空间。</li></ul></li><li>行格式(Row Format)<ul><li>在不同的存储引擎中支持了不同的行格式，如果使用紧凑的行格式可能会增加 CPU 负载但是会减少磁盘负载。需结合具体需求进行确定。</li><li>对于 MyISAM 表，如果没有可变长度的列(VARCHAR, TEXT, BLOB)，可以使用固定大小的行格式(FIXED)。这样会更快，但是浪费了空间。</li></ul></li><li>索引(Indexes)<ul><li>表的主索引应尽可能短。</li><li>仅创建提高查询性能所需的索引。索引的 Key 应当以检索频率进行排序，最左侧的应该是常见且经常重复的列。</li><li>如果说长字符串的前 N 位已经足够表达唯一性了，后续内容可以忽略则可以在创建索引的时候指定位数。</li></ul></li><li>链接(Joins)<ul><li>将频繁被查询的数据和不用于查询只展示的数据进行分离。</li><li>在具有相同数据类型的不同表中声明具有相同信息的列，以加快基于相应列的连接。</li><li>保持列名简单，以便在不同的表中使用相同的名称并简化联接查询。</li></ul></li><li>范式化(Normalization)<ul><li>通常，尽量保持所有数据不冗余。</li><li>如果速度比磁盘空间和保留多个数据副本的维护成本更重要，则可以考虑冗余。</li></ul></li></ul><p>在选择列数据类型时可以遵循如下逻辑：</p><ul><li>数值型<ul><li>优先选择用数值型进行存储而不要使用字符串。</li><li>如果是数值数据，在实时链接下比读取文件快。</li></ul></li><li>字符型<ul><li>在不需要语言特行排序和比较特性的情况下，可以使用二进制（binary）排序规则（collation）来提高比较和排序操作的性能。</li><li>在比较不同列的值时，尽可能使用相同的字符集和排序规则声明这些列，以避免在运行查询时进行字符串转换。</li><li>对于内容小于 8KB 的列值，请使用二进制 VARCHAR 而不是 BLOB。</li><li>如果表包含字符串列，例如 name 和 address，但许多查询不会检索这些列， 考虑将字符串列拆分为单独的 table 并使用带有外键的联接查询。</li><li>如果使用随机的值作为主键(类似 UUID)时最好在前面附加时间数据，便于 InnoDB 索引插入和检索。</li></ul></li><li>BLOB 型<ul><li>存储包含文本数据的大型 blob 时， 首先考虑压缩它。</li><li>对于具有多个列的表，为了减少不使用 BLOB 列的查询的内存需求，可以考虑将 BLOB 列拆分为一个单独的表，并在需要时用联接查询引用它。</li><li>可以将 BLOB 数据存储在独立的存储设备或单独的数据库实例上。</li><li>可以将列值的哈希值存储在单独的列中，为该列编制索引，并在查询中测试哈希值，而不是针对很长的文本字符串测试内容是否相同。</li></ul></li></ul><p>在库和表以及配置上可以遵循如下逻辑：</p><ul><li>确定集群的缓存策略，调整 <code>open_files_limit</code> 系统配置，以便更好地利用缓存策略，还可以微调 table_open_cache 和 max_connections 配置项。</li><li>如果库中有许多 MyISAM 表，则需要增加缓存条目数避免打开、关闭和创建操作影响性能。</li><li>如果在使用中有很多临时表的创建也会遇到性能问题，可以尝试优化 SQL 或者修改配置将临时表存储在内存中。</li></ul><h3 id="优化存储引擎">优化存储引擎</h3><p>此处暂时只针对 InnoDB 进行整理，后期如有时间会进行补充完善。</p><h4 id="InnoDB">InnoDB</h4><ul><li>优化表的存储布局<ul><li>一旦数据趋于稳定或有大量数据插入后可以使用 <code>OPTIMIZE TABLE</code> 语句整理表空间和索引。</li><li>尝试避免长字符串主键。</li><li>使用 VARCHAR 而不是 CHAR 存储可变长度字符串。</li><li>对于较大的表格或包含大量重复文本的表格或数值数据，请考虑使用 COMPRESSED 行格式。</li></ul></li><li>优化事务管理<ul><li>将事务功能的性能开销和服务器的工作负载之间找到理想的平衡。相关业务逻辑合并到单个事务中，可以减少事务的开销。</li><li>对于仅包含单个 SELECT 语句的事务，启用 AUTOCOMMIT 会有所帮助 InnoDB 识别只读事务并对其进行优化。</li><li>避免在单个事务中插入更新或删除大量行然后进行回滚，此时数据库若性能下降不要终结数据库进程。回滚会在服务启动时重新执行。为了避免此问题可以做如下处理：<ul><li>增加缓冲池大小。</li><li>设置 <code>innodb_change_buffering=all</code> ，以便 update 和 delete 操作存储在缓存中。</li><li>考虑将大量数据分批次处理。</li></ul></li><li>修改或删除行时，行和关联的 redo log 不会立即以物理删除，甚至不会在事务提交后立即删除。旧数据将保留，直到较早或同时开始的事务完成，以便这些事务可以访问已修改或删除行的先前状态。因此，长时间运行的事务可能会阻止 InnoDB 清除由其他事务更改的数据。</li><li>在长时间运行的事务中，如果使用 READ COMMITED 和 REPEATABLE READ 隔离级别的其他事务读取相同的行，则必须做更多的工作来重建旧数据。</li><li>当一个长时间运行的事务修改了表中的数据时，其他并发事务对同一表的查询可能会失去使用覆盖索引(covering index)的能力。</li></ul></li><li>优化只读事务<ul><li>InnoDB 可以通过识别只读事务并优化其处理方式来减少与设置 TRX_ID 相关的开销。对于明确为只读的事务，不需要分配事务 ID，因为这些事务不会执行写操作或锁定读取。这种优化减少了内部数据结构的大小和复杂度，进而提升了查询性能，尤其是在高并发环境下。</li></ul></li><li>优化 Redo Log<ul><li>增加 Redo Log 文件的大小。什么时候 InnoDB 已将重做日志文件写入完整，它必须在检查点中将缓冲池的修改内容写入磁盘。若配置较小会导致许多不必要的磁盘写入。</li><li>考虑增加 log 缓冲区。</li><li>配置 innodb_log_write_ahead_size 与操作系统或文件系统缓存块大小相匹配的值，使用如下命令即可查看 <code>stat -f --format=&quot;%S&quot; &lt;path&gt;</code>。</li><li>若并发低则关闭 innodb_log_writer_threads 。</li><li>优化用户线程在等待刷新重做日志（flushed redo）时的自旋延迟（spin delay）设置，可以帮助你根据系统负载情况调整性能和资源使用。通过合理配置 innodb_log_wait_for_flush_spin_hwm、innodb_log_spin_cpu_abs_lwm 和 innodb_log_spin_cpu_pct_hwm 系统变量，可以在高并发和低并发期间实现更高效的资源利用。<ul><li>innodb_log_wait_for_flush_spin_hwm 当平均日志刷新时间超过该值时，用户线程将不再进行自旋等待，而是进入睡眠状态。高并发时减少，低时增加。</li><li>innodb_log_spin_cpu_abs_lwm CPU 使用率低于该阈值时，用户线程将不再进行自旋等待。这个值是基于绝对 CPU 核心使用量的总和。如果系统 CPU 使用率较低，可以通过提高这个阈值。</li><li>innodb_log_spin_cpu_pct_hwm 当总的 CPU 使用率超过该百分比时，用户线程将不再进行自旋等待。这个值是基于绝对 CPU 核心使用量的总和。在高并发情况下，降低这个值。</li></ul></li></ul></li><li>批量插入优化。<ul><li>在插入大量数据时先关闭 <code>SET autocommit=0</code> 然后结束后再 <code>COMMIT;</code> 。</li><li>对于包含唯一约束（UNIQUE 约束）的二级索引，在导入大量数据时临时关闭唯一性检查可以显著提高导入速度。这是因为 InnoDB 可以利用其更改缓冲区(change buffer)来批量写入二级索引记录，从而减少大量的磁盘 I/O 操作。</li><li>关闭外键检查可以节省磁盘 I/O ，增加插入性能。</li><li>使用多行 INSERT 语法来减少客户端和服务器之间的通信开销。</li><li>设置 innodb_autoinc_lock_mode 为 2（交错模式，interleaved）可以在执行批量插入到带有自增列（AUTO_INCREMENT）的表时显著提升性能，特别是在高并发环境下。</li><li>在执行批量插入时，按照主键(PRIMARY KEY)顺序插入行可以显著提高性能，尤其是在 InnoDB 表中。这是因为 InnoDB 使用聚簇索引，数据物理上是按照主键顺序存储的。因此，按主键顺序插入数据可以减少页面分裂和随机 I/O 操作，从而提升插入速度。对于那些不能完全放入缓冲池(buffer pool)的大表来说，这一点尤为重要。</li><li>为了在将数据加载到InnoDB FULLTEXT索引时获得最佳性能，请执行以下步骤：<ul><li>在表创建时定义一个类型为 BIGINT UNSIGNED NOT NULL 的列 FTS_DOC_ID，该列具有一个名为 FTS_DOC_ID_index 的唯一索引。</li><li>将数据加载到表中。</li><li>创建 FULLTEXT 索引。</li></ul></li><li>在向新的 MySQL 实例加载大量数据时，考虑临时禁用重做日志（redo log）可以显著提高数据加载速度。</li><li>使用 MySQL Shell 的 util.importTable() 和 util.loadDump() 指令可以显著提高大规模数据文件的导入速度，特别是当处理大容量数据时。这些工具提供了并行加载功能，能够充分利用多核处理器的优势，从而加快数据导入过程。</li></ul></li><li>优化 InnoDB 查询。<ul><li>选择最重要的列作为主键。</li><li>不要在主键中指定太多或太长的列，因为这些列值在每个辅助索引中都是重复的。当索引包含不必要的数据时，读取这些数据的 I/O 和缓存这些数据的内存会降低服务器的性能和可扩展性。</li><li>不要为每列创建单独的索引，而是根据查询情况设置联合索引。</li><li>如果索引列不能包含任何 NULL 值，请在创建表时将其声明为 NOT NULL。优化器当知道每列是否包含 NULL 值可以更好地确定哪个索引最有效地用于查询。</li><li>优化只读事务</li></ul></li><li>优化 InnoDB DDL。<ul><li>对表和索引的 DDL 操作可以不影响之前的环境。</li><li>加载数据之后再建立索引会快一些。</li><li>在没有外键时可以使用 <code>TRUNCATE TABLE</code> 清空表，如果有外键的话使用 <code>DROP TABLE</code> 和 <code>CREATE TABLE</code> 的命令可能是最快的方法。</li></ul></li><li>优化 InnoDB 磁盘 I/O。<ul><li>增加缓冲池大小到系统内存的 50%-75%。</li><li>如果数据写入磁盘的速度很慢，可以将 innodb_flush_method 设置为 O_DSYNC。</li><li>在多实例多租户情况下考虑调整 innodb_fsync_threshold 的值，批量将数据写入磁盘。</li><li>打开 innodb_use_fdatasync 配置。</li><li>在 Linux 系统中可以使用 noop 和 deadline 调度器，使用如下命令检查 <code>cat /sys/block/sd&lt;device&gt;/queue/scheduler</code> 输出结果是支持的调度器，用方括号选中的是现在正在使用的。</li><li>将数据文件和日志文件分离放置。</li><li>使用 SSD 存储数据，并检查如下配置：<ul><li>innodb_checksum_algorithm 应当设置为 crc32。</li><li>innodb_flush_neighbors 设置为 0。</li><li>调整 innodb_idle_flush_pct 参数，调大会增加硬盘读写次数损耗寿命调小会让内存压力增大。</li><li>调整 innodb_io_capacity 参数，例如 1000。</li><li>调整 innodb_io_capacity_max 参数，例如 2500。</li><li>如果 redo log 在 SSD 上，需要禁用 innodb_log_compressed_pages。</li><li>如果 redo log 在 SSD 上，增加 innodb_redo_log_capacity。</li><li>查看硬件的扇区大小与 innodb_page_size 进行匹配。</li><li>如果日志在 SSD 上，并且所有表都有主键可以将 binlog_row_image 设置为 minimal。</li><li>增加 innodb_doublewrite_pages 参数。</li><li>调整 innodb_read_io_threads 和 innodb_write_io_threads 线程数，默认配置跑不满磁盘。</li></ul></li><li>调整 innodb_io_capacity 参数。</li><li>禁用压缩页面的日志记录 innodb_log_compressed_pages。</li></ul></li><li>优化 InnoDB 配置变量。<ul><li>配置 InnoDB 缓存的数据操作类型 innodb_change_buffering。</li><li>在写入多时可以尝试关闭 innodb_adaptive_hash_index。</li><li>配置并发线程数 innodb_thread_concurrency。</li><li>合理配置预读缓存 innodb_read_ahead_threshold。</li><li>合理配置 InnoDB 的缓冲池刷新算法 (Buffer Pool Flushing Algorithm)。</li><li>利用多核处理器及其缓存内存配置优化自旋锁，以最小化上下文切换延迟。</li><li>防止 table scans 等一次性操作，干扰 InnoDB 缓冲区缓存。</li><li>将日志文件调整为对可靠性和崩溃恢复有意义的大小。</li><li>配置多个缓冲池实例。</li><li>增加并发事务的最大数量。</li><li>将垃圾回收策略配置为后台线程。</li><li>调整 innodb_thread_concurrency 和 innodb_concurrency_tickets 参数，限制同时处理的线程数量，并允许每个线程在被换出之前完成更多的工作，从而保持等待线程的数量较低，并使操作能够在不过度进行上下文切换的情况下完成。</li></ul></li><li>如果使用了非持久化优化器统计信息，需要在打开数据库后进行一次读取预热数据。</li></ul><h3 id="在硬件级别进行优化">在硬件级别进行优化</h3><p>任何数据库应用程序最终都会达到硬件限制，因为数据库变得越来越繁忙。DBA 必须进行评估，然后调整应用程序或重新配置服务器。要避免性能瓶颈，可以使用纵向扩展的思路，增加或优化硬件资源。系统瓶颈通常来自以下来源：</p><ul><li>磁盘查找(Disk seeks)</li><li>磁盘读取和写入(Disk reading and writing)</li><li>CPU 周期(CPU cycles)</li><li>内存带宽(Memory bandwidth)</li></ul><h3 id="参考资料">参考资料</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/optimization.html">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="MySQL" scheme="https://wangqian0306.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://wangqian0306.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP</title>
    <link href="https://wangqian0306.github.io/2024/spring-aop/"/>
    <id>https://wangqian0306.github.io/2024/spring-aop/</id>
    <published>2024-12-04T13:32:58.000Z</published>
    <updated>2025-01-08T02:56:21.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring-AOP">Spring AOP</h2><h3 id="简介">简介</h3><p>面向方面编程(Aspect-oriented Programming,AOP)通过提供另一种思考程序结构的方式来补充面向对象编程 (Object-oriented Programming, OOP)。在 OOP 中，模块化的关键单元是类，而在 AOP 中，模块化的单元是切面。切面可以支持跨多个类型和对象的关注点进行通用的处理。</p><p>在 Spring 中，</p><h3 id="概念和使用场景">概念和使用场景</h3><p>在切面编程的时候有很多的专业名词，但是从使用上讲可以简单归类为以下几处：</p><ol><li>切面(Aspect)</li><li>连接点(Join Point)</li><li>通知(Advice)</li><li>切入点(Pointcut)</li><li>织入(Weaving)</li></ol><blockquote><p>注：此处内容简略，详细内容请参照官方文档。</p></blockquote><p>在编码时可以简单的只考虑：</p><ol><li>切面</li><li>切入点</li></ol><h4 id="Advice-类型和使用场景">Advice 类型和使用场景</h4><p>切面编写时，首先需要明确要执行的业务逻辑，也就是通知(Advice)：</p><table><thead><tr><th>Advice 类型</th><th>描述</th><th>使用场景</th></tr></thead><tbody><tr><td>Before Advice</td><td>在目标方法执行之前执行</td><td>权限校验、日志记录、参数验证等</td></tr><tr><td>After Advice</td><td>在目标方法执行后（无论是否成功）执行</td><td>清理资源、释放锁、后置操作等</td></tr><tr><td>After Returning Advice</td><td>在目标方法正常返回后执行</td><td>结果日志记录、统计等</td></tr><tr><td>After Throwing Advice</td><td>在目标方法抛出异常后执行</td><td>异常日志记录、异常处理等</td></tr><tr><td>Around Advice</td><td>在目标方法执行前后都能执行，完全控制目标方法</td><td>性能监控、事务管理、缓存处理、全局异常处理等</td></tr></tbody></table><p>在选择 Advice 类型时可以使用如下的思路：</p><ul><li>如果你只关心方法执行前后发生的事情，可以使用 Before 和 After。</li><li>如果你只关心方法的返回值或异常，使用 After Returning 或 After Throwing。</li><li>如果你需要对方法的执行过程进行全面控制，使用 Around Advice，它能在方法执行前后插入代码，并能改变方法的返回值或决定是否执行目标方法。</li></ul><h4 id="Pointcut-Designator">Pointcut Designator</h4><p>业务逻辑编写完成后即可选择切点，也就是确认切面要执行的位置。可以将其指定为方法，类，注解等：</p><table><thead><tr><th>Pointcut Designator</th><th>描述</th><th>使用场景</th></tr></thead><tbody><tr><td>execution()</td><td>匹配方法执行时的连接点</td><td>通常用于方法调用的切点，最常用</td></tr><tr><td>within()</td><td>匹配指定类或包中的方法</td><td>用于限定类或包范围的切点</td></tr><tr><td>this()</td><td>匹配目标方法所在代理对象的类型</td><td>适用于代理对象的类型匹配</td></tr><tr><td>target()</td><td>匹配目标方法所在目标对象的类型</td><td>适用于目标对象类型的匹配</td></tr><tr><td>args()</td><td>匹配方法参数类型</td><td>用于方法参数类型匹配</td></tr><tr><td>@args()</td><td>匹配方法参数上标注的注解类型</td><td>用于基于方法参数的注解类型匹配</td></tr><tr><td>@annotation()</td><td>匹配标注了特定注解的方法</td><td>用于基于注解的方法切点</td></tr><tr><td>@within()</td><td>匹配类或方法上标注特定注解的类</td><td>用于类上注解的匹配</td></tr><tr><td>@target()</td><td>匹配目标对象上标注特定注解的方法</td><td>用于目标对象本身带注解的方法匹配</td></tr></tbody></table><h3 id="示例">示例</h3><p>编写 <code>Convert.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Convert</span>&lt;PARAM&gt; &#123;<br><br>    OperateLog <span class="hljs-title function_">convert</span><span class="hljs-params">(PARAM param)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>SaveOrder.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">SaveOrder</span> (<br>        Long id<br>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>UpdateOrder.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">UpdateOrder</span><span class="hljs-params">(</span><br><span class="hljs-params">        Long orderId</span><br><span class="hljs-params">)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>OperateLog.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperateLog</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long orderId;<br><br>    <span class="hljs-keyword">private</span> String desc;<br><br>    <span class="hljs-keyword">private</span> String result;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>SaveLogConvert.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaveLogConvert</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Convert</span>&lt;SaveOrder&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> OperateLog <span class="hljs-title function_">convert</span><span class="hljs-params">(SaveOrder saveOrder)</span> &#123;<br>        <span class="hljs-type">OperateLog</span> <span class="hljs-variable">operateLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperateLog</span>();<br>        operateLog.setOrderId(saveOrder.id());<br>        <span class="hljs-keyword">return</span> operateLog;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>UpdateLogConvert.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateLogConvert</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Convert</span>&lt;UpdateOrder&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> OperateLog <span class="hljs-title function_">convert</span><span class="hljs-params">(UpdateOrder updateOrder)</span> &#123;<br>        <span class="hljs-type">OperateLog</span> <span class="hljs-variable">operateLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperateLog</span>();<br>        operateLog.setOrderId(updateOrder.orderId());<br>        <span class="hljs-keyword">return</span> operateLog;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>RecordOperate.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RecordOperate &#123;<br><br>    String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Convert</span>&gt; convert();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>OrderService.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@RecordOperate(desc = &quot;保存订单&quot;, convert = SaveLogConvert.class)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(SaveOrder saveOrder)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;saveOrder: &#123;&#125;&quot;</span>, saveOrder);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RecordOperate(desc = &quot;更新订单&quot;, convert = UpdateLogConvert.class)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">updateOrder</span><span class="hljs-params">(UpdateOrder updateOrder)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;updateOrder: &#123;&#125;&quot;</span>, updateOrder);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编写 <code>StartUpRunner.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StartUpRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        orderService.saveOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SaveOrder</span>(<span class="hljs-number">123L</span>));<br>        orderService.updateOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateOrder</span>(<span class="hljs-number">123L</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在入口添加如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序即可获得 AOP 产生的日志。</p><h3 id="参考资料">参考资料</h3><p><a href="https://docs.spring.io/spring-framework/reference/core/aop.html">官方文档</a></p><p><a href="https://www.bilibili.com/video/BV1oD4y1W7Lh">【Java高级】你真的会切面编程么？技术专家实战演示！全是细节！</a></p><p><a href="https://www.bilibili.com/video/BV1VS4y127Lo">【IT老齐140】非常实用！Spring AOP与自定义注解实现共性需求</a></p><p><a href="https://mp.weixin.qq.com/s/JC51S_bI02npm4CE5NEEow">如何优雅地记录操作日志？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Spring" scheme="https://wangqian0306.github.io/categories/Spring/"/>
    
    
    <category term="Java" scheme="https://wangqian0306.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://wangqian0306.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>GeoTIFF</title>
    <link href="https://wangqian0306.github.io/2024/geotiff/"/>
    <id>https://wangqian0306.github.io/2024/geotiff/</id>
    <published>2024-11-25T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="GeoTIFF">GeoTIFF</h2><h3 id="简介">简介</h3><p>GeoTIFF 是一种公共领域元数据标准，允许将地理参考信息嵌入 TIFF 文件中。潜在的附加信息包括地图投影、坐标系、椭球体、基准以及为文件建立精确空间参考所需的所有其他信息。</p><h3 id="使用方式">使用方式</h3><p>安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install rasterio<br></code></pre></td></tr></table></figure><h4 id="读取文件">读取文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rasterio<br><br><span class="hljs-comment"># 打开 merge.tiff 文件</span><br>file_path = <span class="hljs-string">&quot;merge.tiff&quot;</span><br><br><span class="hljs-keyword">with</span> rasterio.<span class="hljs-built_in">open</span>(file_path) <span class="hljs-keyword">as</span> dataset:<br>    <span class="hljs-comment"># 打印文件的元数据信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件元数据：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(dataset.meta)<br>    <br>    <span class="hljs-comment"># 打印更多详细的元数据</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n详细元数据信息：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;宽度 (Width): <span class="hljs-subst">&#123;dataset.width&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;高度 (Height): <span class="hljs-subst">&#123;dataset.height&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;波段数量 (Number of bands): <span class="hljs-subst">&#123;dataset.count&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;数据类型 (Data type): <span class="hljs-subst">&#123;dataset.dtypes&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;坐标参考系 (CRS): <span class="hljs-subst">&#123;dataset.crs&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;仿射变换 (Transform): <span class="hljs-subst">&#123;dataset.transform&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;边界范围 (Bounds): <span class="hljs-subst">&#123;dataset.bounds&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 检查并打印波段的描述</span><br>    <span class="hljs-keyword">for</span> band_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, dataset.count + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n波段 <span class="hljs-subst">&#123;band_id&#125;</span> 的描述:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(dataset.descriptions[band_id - <span class="hljs-number">1</span>])<br><br>    data = dataset.read(<span class="hljs-number">1</span>)<br>    demo_list = data.tolist()<br>    <span class="hljs-built_in">print</span>(demo_list[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(demo_list[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h4 id="写入文件">写入文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">buildArray</span>(<span class="hljs-params">number:<span class="hljs-built_in">int</span></span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">180</span>):<br>        cache = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">360</span>):<br>            cache.append(number)<br>        result.append(cache)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> rasterio<br><span class="hljs-keyword">from</span> rasterio.transform <span class="hljs-keyword">import</span> Affine<br><span class="hljs-keyword">from</span> rasterio.crs <span class="hljs-keyword">import</span> CRS<br><br>driver = <span class="hljs-string">&#x27;GTiff&#x27;</span><br>dtype = <span class="hljs-string">&#x27;int16&#x27;</span><br>nodata = <span class="hljs-literal">None</span><br>width = <span class="hljs-number">360</span><br>height = <span class="hljs-number">180</span><br>count = <span class="hljs-number">2</span><br>crs = CRS.from_wkt(<span class="hljs-string">&#x27;GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Latitude&quot;,NORTH],AXIS[&quot;Longitude&quot;,EAST],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]&#x27;</span>)<br>transform = Affine(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, -<span class="hljs-number">0.5</span>, <span class="hljs-number">0.0</span>, -<span class="hljs-number">1.0</span>, <span class="hljs-number">90.0</span>)<br><br><br>metadata = &#123;<br>    <span class="hljs-string">&#x27;driver&#x27;</span>: driver,<br>    <span class="hljs-string">&#x27;dtype&#x27;</span>: dtype,<br>    <span class="hljs-string">&#x27;nodata&#x27;</span>: nodata,<br>    <span class="hljs-string">&#x27;width&#x27;</span>: width,<br>    <span class="hljs-string">&#x27;height&#x27;</span>: height,<br>    <span class="hljs-string">&#x27;count&#x27;</span>: count,<br>    <span class="hljs-string">&#x27;crs&#x27;</span>: crs,<br>    <span class="hljs-string">&#x27;transform&#x27;</span>: transform<br>&#125;<br><br>band1 = np.array(buildArray(<span class="hljs-number">180</span>), dtype=np.int16)<br>band2 = np.array(buildArray(<span class="hljs-number">180</span>), dtype=np.int16)<br><br><span class="hljs-comment"># Write the GeoTIFF</span><br>output_path = <span class="hljs-string">&quot;sample.tiff&quot;</span><br><span class="hljs-keyword">with</span> rasterio.<span class="hljs-built_in">open</span>(output_path, <span class="hljs-string">&#x27;w&#x27;</span>, **metadata) <span class="hljs-keyword">as</span> dst:<br>    dst.write(band1, <span class="hljs-number">1</span>)  <span class="hljs-comment"># Write Band 1</span><br>    dst.write(band2, <span class="hljs-number">2</span>)  <span class="hljs-comment"># Write Band 2</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;GeoTIFF file created: <span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>除了把原始数据直接写入 tiff 中之外还可以针对数据进行分级规划。比方说可以按照如下方式进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_2d_array</span>(<span class="hljs-params">input_array, func</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    对二维数组中的每个元素应用函数处理，返回一个新的二维数组。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param input_array: 输入的二维数组</span><br><span class="hljs-string">    :param func: 用于处理每个元素的函数</span><br><span class="hljs-string">    :return: 处理后的二维数组</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> [[func(value) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> row] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> input_array]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_to_int</span>(<span class="hljs-params">data, max_value=<span class="hljs-number">32</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将数据转换为 -300 到 300 的整型数据。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param data: 原始数据值，可以为负值</span><br><span class="hljs-string">    :param max_value: 最大速度的绝对值 (默认 32)</span><br><span class="hljs-string">    :return: 映射到 -300 到 300 的整型值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(data) &gt; max_value:<br>        data = max_value <span class="hljs-keyword">if</span> data &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -max_value  <span class="hljs-comment"># 限制在 [-max_value, max_value]</span><br><br>    <span class="hljs-comment"># 映射公式：将 [-max_value, max_value] 映射到 [-300, 300]</span><br>    mapped_value = (data / max_value) * <span class="hljs-number">300</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(mapped_value)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">filename, result_name</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        text = f.read()<br>        input_array = json.loads(text)<br>        output_array = process_2d_array(input_array, data_to_int)<br>        output_json = json.dumps(output_array, indent=<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_name, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(output_json)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    process(<span class="hljs-string">&quot;u_wind_filtered.json&quot;</span>, <span class="hljs-string">&quot;u_wind_modified.json&quot;</span>)<br>    process(<span class="hljs-string">&quot;v_wind_filtered.json&quot;</span>, <span class="hljs-string">&quot;v_wind_modified.json&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注：此处数据采用 180 个长度为 360 的数组(二维数组，数据分辨率为 1 度)。</p></blockquote><h4 id="数据偏移">数据偏移</h4><p>如果说由于数据源对应的分辨率和当前地图不一致则可以使用如下代码针对数组进行偏移处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_to_right</span>(<span class="hljs-params">matrix, n</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> matrix <span class="hljs-keyword">or</span> n &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> matrix<br><br>    result = []<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &lt;= n:<br>            result.append(row)<br>        <span class="hljs-keyword">else</span>:<br>            result.append(row[-n:] + row[:<span class="hljs-built_in">len</span>(row) - n])<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_to_left</span>(<span class="hljs-params">matrix, n</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> matrix <span class="hljs-keyword">or</span> n &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> matrix<br><br>    result = []<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &lt;= n:<br>            result.append(row)<br>        <span class="hljs-keyword">else</span>:<br>            result.append(row[n:] + row[:n])<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://github.com/shianqi/3d-wind/blob/master/src/group/wind.js#L5C1-L5C40">参考代码</a></p><p><a href="https://github.com/rasterio/rasterio">官方项目</a></p><p><a href="https://rasterio.readthedocs.io/en/stable/">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Ocean" scheme="https://wangqian0306.github.io/categories/Ocean/"/>
    
    
    <category term="Python" scheme="https://wangqian0306.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Watchtower</title>
    <link href="https://wangqian0306.github.io/2024/watchtower/"/>
    <id>https://wangqian0306.github.io/2024/watchtower/</id>
    <published>2024-11-22T13:41:32.000Z</published>
    <updated>2025-01-08T02:56:21.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Watchtower">Watchtower</h2><h3 id="简介">简介</h3><p>Watchtower 是一个 Docker，它主要被用来自动更新容器镜像。</p><blockquote><p>注：此项目只能在开发环境使用。</p></blockquote><h3 id="使用方式">使用方式</h3><p>可以使用 docker-compose 部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">watchtower:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">containrrr/watchtower</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REPO_USER=&lt;user&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REPO_PASS=&lt;password&gt;</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--interval</span> <span class="hljs-number">14400</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><blockquote><p>注：interval 表示检查镜像的时间单位为秒，样例是 4 小时拉一次。</p></blockquote><h3 id="参考资料">参考资料</h3><p><a href="https://github.com/containrrr/watchtower">官方项目</a></p><p><a href="https://containrrr.dev/watchtower">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Container" scheme="https://wangqian0306.github.io/categories/Container/"/>
    
    
    <category term="Container" scheme="https://wangqian0306.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Xihe-GlobalOceanForecasting</title>
    <link href="https://wangqian0306.github.io/2024/xihe/"/>
    <id>https://wangqian0306.github.io/2024/xihe/</id>
    <published>2024-11-19T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Xihe-GlobalOceanForecasting">Xihe-GlobalOceanForecasting</h2><h3 id="简介">简介</h3><p>2024年2月5日，国防科技大学气象海洋学院联合复旦大学大气与海洋科学系、中南大学计算机学院等单位，研制了首个数据驱动的全球1/12°高分辨率海洋环境预报大模型“羲和”。</p><h3 id="使用流程和逻辑">使用流程和逻辑</h3><p>羲和海洋大模型的数据来自三个部分：</p><ul><li>ERA5 大气再分析数据</li><li>GHRSST 海表温度数据</li><li>GLORYS12 海洋再分析数据</li></ul><p>使用这些数据做训练可以形成模型，然后再输入如下变量即可完成预测：</p><ul><li>表层变量（surface）</li><li>深层变量（deep）</li><li>静态变量（包含经纬度网格、掩膜数组和气候统计量）</li></ul><blockquote><p>注：详细描述参见官方项目 README 文件。</p></blockquote><p>再制作输入数据时，可以获取一整月的来源数据，然后计算平均值，再使用插值法处理投影成 (2041, 4320) 大小即可作为输入数据集。</p><p>在准备好环境之后即可使用代码中的 <code>inference.py</code> 文件进行预测。</p><blockquote><p>注：此时需要下载模型文件 file_path 和模型权重 project_path 作为基础资源，在 main 函数中需要设定输入和输出问文件夹以及输入文件对应的日期。</p></blockquote><p>安装如下依赖之后即可运行官方项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m pip install --upgrade pip<br>pip install cinrad==1.9.1<br>pip install meteva==1.9.1.2<br>pip install pypots==0.8.1<br>pip install pyproj==3.7.0<br>pip install OWSLib==0.29.3<br>pip install dask==2024.11.1<br>pip install distributed==2024.11.1<br>pip install MetPy==1.6.3<br>pip install Pillow==11<br>pip install xarray==2024.10<br>pip install numpy==1.26.4<br>pip install rioxarray==0.17<br>pip install seaborn==0.13.2<br>pip install pandas==2.2.3<br>pip install imageio==2.36<br>pip install rasterio==1.4.2<br>pip install shapely==2.0.6<br>pip install geopandas==1.0.1<br>pip install cf-xarray==0.10.0<br>pip install networkx==3.3<br>pip install zarr==2.18.3<br>pip install jax==0.4.34<br>pip install transformers==4.46.2<br>pip install lightgbm==4.5.0<br>pip install xgboost==2.1.2<br>pip install cmaps==2.0.1<br>pip install scikit-learn==1.6.0rc1<br>pip install cartopy==0.24.1<br>pip install pytorch-lightning==2.4.0<br>pip install wandb==0.18.7<br>pip install gluonts==0.15.1<br>pip install onnx==1.16.2<br>pip install matplotlib==3.9.2<br>pip install statsmodels==0.14.2<br>pip install shap==0.46<br>pip install pytorch-tabnet==4.1.0<br>pip install torch torchvision torchaudio -i https://pypi.tuna.tsinghua.edu.cn/simple<br>pip install scipy==1.13.1<br>pip install https://ms-release.obs.cn-north-4.myhuaweicloud.com/2.4.0/MindSpore/unified/x86_64/mindspore-2.4.0-cp39-cp39-linux_x86_64.whl --trusted-host ms-release.obs.cn-north-4.myhuaweicloud.com -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python inference.py --lead_day 7 --save_path output_data<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://arxiv.org/abs/2402.02995">论文原文</a></p><p><a href="https://github.com/Ocean-Intelligent-Forecasting/XiHe-GlobalOceanForecasting">官方项目</a></p><p><a href="https://www.heywhale.com/home/competition/672897e65bbefcbb457ca425">动手用羲和海洋AI大模型预报海温、流速 | GeoAI workshop</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Ocean" scheme="https://wangqian0306.github.io/categories/Ocean/"/>
    
    
    <category term="Python" scheme="https://wangqian0306.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>digital-signage</title>
    <link href="https://wangqian0306.github.io/2024/digital-signage/"/>
    <id>https://wangqian0306.github.io/2024/digital-signage/</id>
    <published>2024-11-13T14:26:13.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Digital-Signage">Digital Signage</h2><h3 id="简介">简介</h3><p>数字标牌项目可以用来做大屏展示。</p><h3 id="Anthias">Anthias</h3><h4 id="部署样例">部署样例</h4><p><a href="https://github.com/Screenly/Anthias/blob/master/docker-compose.yml.tmpl">参考文件</a></p><blockquote><p>注：在 x86 系统中部署时遇到了 viewer 卡住没能正常启动的问题，暂时没有使用树莓派测试。</p></blockquote><h4 id="参考资料">参考资料</h4><p><a href="https://anthias.screenly.io/">Anthias</a></p><h3 id="Xibo">Xibo</h3><h4 id="部署样例-2">部署样例</h4><p><a href="https://github.com/xibosignage/xibo-docker">参考项目</a></p><p><a href="https://github.com/xibosignage/xibo-dotnetclient">客户端</a></p><blockquote><p>注：在链接时不要使用代码方式，输入在配置中看到的 CMS Secret Key 点击链接后在 Display 页面选择 Authorize 即可，进入界面后按 i 即可得到相关日志。之后的使用可以参考使用文档。</p></blockquote><h4 id="参考资料-2">参考资料</h4><p><a href="https://xibosignage.com/open-source">官方网站</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="digital-signage" scheme="https://wangqian0306.github.io/tags/digital-signage/"/>
    
  </entry>
  
  <entry>
    <title>Apache Benchmark</title>
    <link href="https://wangqian0306.github.io/2024/ab/"/>
    <id>https://wangqian0306.github.io/2024/ab/</id>
    <published>2024-10-31T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Apache-Benchmark">Apache Benchmark</h2><h3 id="简介">简介</h3><p>Apache Benchmark (ab) 是一个开源的压力测试工具，它是 Apache HTTP 服务器的一部分。ab 工具主要用于测试Web服务器软件（如Apache、Nginx等）的并发性能和吞吐量。</p><h3 id="使用方式">使用方式</h3><p>使用如下命令即可完成安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum insatll httpd-tools<br></code></pre></td></tr></table></figure><p>使用如下命令即可完成测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ab -n 200 -c 8 https://xxx.xxx.xxx/xxx<br></code></pre></td></tr></table></figure><blockquote><p>注：<code>-n</code> 表示请求的总数 <code>-c</code> 表示并发量。</p></blockquote><h3 id="参考资料">参考资料</h3><p><a href="https://httpd.apache.org/docs/current/programs/ab.html">Apache Benchmark 使用手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://wangqian0306.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Apache Benchmark" scheme="https://wangqian0306.github.io/tags/Apache-Benchmark/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="https://wangqian0306.github.io/2024/react/"/>
    <id>https://wangqian0306.github.io/2024/react/</id>
    <published>2024-10-22T13:41:32.000Z</published>
    <updated>2025-01-08T02:56:21.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="React">React</h2><h3 id="简介">简介</h3><p>做 Next.js 的时候发现基础还是要看看。</p><h3 id="初步试用">初步试用</h3><p>井字棋练习题完整版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Square</span>(<span class="hljs-params">&#123; value, onSquareClick, isWinningSquare &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> backgroundColor = isWinningSquare ? <span class="hljs-string">&#x27;yellow&#x27;</span> : <span class="hljs-string">&#x27;white&#x27;</span>;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;square&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onSquareClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">            &#123;value&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Board</span>(<span class="hljs-params">&#123; xIsNext, squares, onPlay, winningSquares &#125;</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params">i</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">calculateWinner</span>(squares) || squares[i]) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">const</span> nextSquares = squares.<span class="hljs-title function_">slice</span>();<br>        <span class="hljs-keyword">if</span> (xIsNext) &#123;<br>            nextSquares[i] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            nextSquares[i] = <span class="hljs-string">&#x27;O&#x27;</span>;<br>        &#125;<br>        <span class="hljs-title function_">onPlay</span>(nextSquares, i);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> winner = <span class="hljs-title function_">calculateWinner</span>(squares)?.<span class="hljs-property">winner</span>;<br>    <span class="hljs-keyword">const</span> isDraw = !winner &amp;&amp; squares.<span class="hljs-title function_">every</span>(<span class="hljs-title class_">Boolean</span>);<br><br>    <span class="hljs-keyword">let</span> status;<br>    <span class="hljs-keyword">if</span> (winner) &#123;<br>        status = <span class="hljs-string">&#x27;Winner: &#x27;</span> + winner;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isDraw) &#123;<br>        status = <span class="hljs-string">&quot;It&#x27;s a draw!&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        status = <span class="hljs-string">&#x27;Next player: &#x27;</span> + (xIsNext ? <span class="hljs-string">&#x27;X&#x27;</span> : <span class="hljs-string">&#x27;O&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;Array(3).fill(null).map((_, rowIndex) =&gt; (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;board-row&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;rowIndex&#125;</span>&gt;</span></span><br><span class="language-xml">                    &#123;Array(3).fill(null).map((_, colIndex) =&gt; &#123;</span><br><span class="language-xml">                        const index = rowIndex * 3 + colIndex;</span><br><span class="language-xml">                        return (</span><br><span class="language-xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">Square</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;squares[index]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                                <span class="hljs-attr">onSquareClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick(index)&#125;</span><br><span class="language-xml">                                isWinningSquare=&#123;winningSquares?.includes(index)&#125;</span><br><span class="language-xml">                            /&gt;</span><br><span class="language-xml">                        );</span><br><span class="language-xml">                    &#125;)&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            ))&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Game</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [history, setHistory] = <span class="hljs-title function_">useState</span>([&#123; <span class="hljs-attr">squares</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">9</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-literal">null</span>), <span class="hljs-attr">position</span>: <span class="hljs-literal">null</span> &#125;]); <span class="hljs-comment">// 记录落子位置</span><br>    <span class="hljs-keyword">const</span> [currentMove, setCurrentMove] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">const</span> [isAscending, setIsAscending] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">const</span> xIsNext = currentMove % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> currentSquares = history[currentMove].<span class="hljs-property">squares</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handlePlay</span>(<span class="hljs-params">nextSquares, position</span>) &#123;<br>        <span class="hljs-keyword">const</span> nextHistory = [...history.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, currentMove + <span class="hljs-number">1</span>), &#123; <span class="hljs-attr">squares</span>: nextSquares, position &#125;];<br>        <span class="hljs-title function_">setHistory</span>(nextHistory);<br>        <span class="hljs-title function_">setCurrentMove</span>(nextHistory.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">jumpTo</span>(<span class="hljs-params">nextMove</span>) &#123;<br>        <span class="hljs-title function_">setCurrentMove</span>(nextMove);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleSortOrder</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">setIsAscending</span>(!isAscending);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> winnerInfo = <span class="hljs-title function_">calculateWinner</span>(currentSquares);<br>    <span class="hljs-keyword">const</span> winningSquares = winnerInfo ? winnerInfo.<span class="hljs-property">line</span> : <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">const</span> sortedMoves = isAscending ? history : [...history].<span class="hljs-title function_">reverse</span>();<br>    <span class="hljs-keyword">const</span> moves = sortedMoves.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">entry, move</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> totalMoves = history.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">const</span> adjustedMove = isAscending ? move : totalMoves - move;<br><br>        <span class="hljs-keyword">let</span> description;<br>        <span class="hljs-keyword">if</span> (adjustedMove === totalMoves &amp;&amp; totalMoves !== <span class="hljs-number">0</span>) &#123;<br>            description = <span class="hljs-string">`You are at move <span class="hljs-subst">$&#123;totalMoves&#125;</span>`</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (adjustedMove &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">const</span> row = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((entry.<span class="hljs-property">position</span> + <span class="hljs-number">1</span>) / <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">const</span> col = (entry.<span class="hljs-property">position</span> + <span class="hljs-number">1</span>) - (row - <span class="hljs-number">1</span>) * <span class="hljs-number">3</span>;<br>            description = <span class="hljs-string">`Go to move #<span class="hljs-subst">$&#123;adjustedMove&#125;</span> (row: <span class="hljs-subst">$&#123;row&#125;</span>, col: <span class="hljs-subst">$&#123;col&#125;</span>)`</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            description = <span class="hljs-string">&#x27;Go to game start&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;adjustedMove&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> jumpTo(adjustedMove)&#125;&gt;&#123;description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        );<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-board&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Board</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">xIsNext</span>=<span class="hljs-string">&#123;xIsNext&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">squares</span>=<span class="hljs-string">&#123;currentSquares&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">onPlay</span>=<span class="hljs-string">&#123;handlePlay&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">winningSquares</span>=<span class="hljs-string">&#123;winningSquares&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;game-info&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggleSortOrder&#125;</span>&gt;</span></span><br><span class="language-xml">                    &#123;isAscending ? &#x27;Sort Descending&#x27; : &#x27;Sort Ascending&#x27;&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>&#123;moves&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateWinner</span>(<span class="hljs-params">squares</span>) &#123;<br>    <span class="hljs-keyword">const</span> lines = [<br>        [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>        [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],<br>        [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>],<br>        [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>],<br>        [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>        [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>],<br>        [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>],<br>    ];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; lines.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> [a, b, c] = lines[i];<br>        <span class="hljs-keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;<br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">winner</span>: squares[a], <span class="hljs-attr">line</span>: lines[i] &#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://react.dev/">官方网站</a></p><p><a href="https://react.dev/learn/tutorial-tic-tac-toe">井字棋教程</a></p><p><a href="https://github.com/enaqx/awesome-react">Awesome React</a></p><p><a href="https://transform.tools/html-to-jsx">HTML to JSX</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="https://wangqian0306.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://wangqian0306.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Apache Tika</title>
    <link href="https://wangqian0306.github.io/2024/tika/"/>
    <id>https://wangqian0306.github.io/2024/tika/</id>
    <published>2024-10-14T14:26:13.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Apache-Tika">Apache Tika</h2><h3 id="简介">简介</h3><p>Apache Tika 可以检测并提取来自一千多种不同文件类型（如PPT、XLS和PDF）的元数据和文本。</p><h3 id="使用方式">使用方式</h3><h4 id="启动服务">启动服务</h4><p>可以选用 Docker 的方式使用：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> apache/tika:latest<br><span class="hljs-keyword">USER</span> root<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install fonts-wqy-zenhei fonts-wqy-microhei xfonts-wqy -y</span><br><span class="hljs-keyword">USER</span> <span class="hljs-number">35002</span>:<span class="hljs-number">35002</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">tika:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">custom/tika:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9998:9998&quot;</span><br></code></pre></td></tr></table></figure><p>也可以通过下载包，并通过 java 来使用，<a href="https://tika.apache.org/download.html">下载地址</a></p><h4 id="读取数据">读取数据</h4><p>首先可以准备好要解析的数据文件，然后安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install tika <br></code></pre></td></tr></table></figure><p>然后编写如下程序即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tika <span class="hljs-keyword">import</span> parser<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_docx</span>(<span class="hljs-params">file_path</span>):<br>    parsed = parser.from_file(file_path)<br>    text = parsed.get(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> text.strip()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    file_path = <span class="hljs-string">&#x27;xxx.xxx&#x27;</span> <br>    content = read_docx(file_path)<br>    <span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://tika.apache.org/">官方网站</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Python" scheme="https://wangqian0306.github.io/tags/Python/"/>
    
    <category term="Apache Tika" scheme="https://wangqian0306.github.io/tags/Apache-Tika/"/>
    
  </entry>
  
  <entry>
    <title>Kivy</title>
    <link href="https://wangqian0306.github.io/2024/kivy/"/>
    <id>https://wangqian0306.github.io/2024/kivy/</id>
    <published>2024-10-08T13:32:58.000Z</published>
    <updated>2025-01-08T02:56:21.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kivy">Kivy</h2><h3 id="简介">简介</h3><p>Kivy 是一个开源的 Python GUI 开发框架。</p><h3 id="安装依赖">安装依赖</h3><p>使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install kivy kivy-md materialyoucolor<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kivymd.app <span class="hljs-keyword">import</span> MDApp<br><span class="hljs-keyword">from</span> kivymd.uix.label <span class="hljs-keyword">import</span> MDLabel<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApp</span>(<span class="hljs-title class_ inherited__">MDApp</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> MDLabel(text=<span class="hljs-string">&quot;Hello, World&quot;</span>, halign=<span class="hljs-string">&quot;center&quot;</span>)<br><br><br>MainApp().run()<br></code></pre></td></tr></table></figure><p>除了使用这样的基本方式外还可以使用配置文件的方式创建页面，具体样例参见下文。</p><h3 id="使用方式">使用方式</h3><h4 id="对接-matplotlib">对接 matplotlib</h4><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install kivy-matplotlib-widget<br></code></pre></td></tr></table></figure><p>编写如下程序即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> kivy.utils <span class="hljs-keyword">import</span> platform<br><br><span class="hljs-comment"># avoid conflict between mouse provider and touch (very important with touch device)</span><br><span class="hljs-comment"># no need for android platform</span><br><span class="hljs-keyword">if</span> platform != <span class="hljs-string">&#x27;android&#x27;</span>:<br>    <span class="hljs-keyword">from</span> kivy.config <span class="hljs-keyword">import</span> Config<br><br>    Config.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;mouse&#x27;</span>, <span class="hljs-string">&#x27;mouse,disable_on_activity&#x27;</span>)<br><br><span class="hljs-keyword">from</span> kivy.lang <span class="hljs-keyword">import</span> Builder<br><span class="hljs-keyword">from</span> kivy.app <span class="hljs-keyword">import</span> App<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> kivy_matplotlib_widget<br><br>KV = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Screen</span><br><span class="hljs-string">    figure_wgt:figure_wgt</span><br><span class="hljs-string">    BoxLayout:</span><br><span class="hljs-string">        orientation:&#x27;vertical&#x27;</span><br><span class="hljs-string">        BoxLayout:</span><br><span class="hljs-string">            size_hint_y:0.2</span><br><span class="hljs-string">            Button:</span><br><span class="hljs-string">                text:&quot;home&quot;</span><br><span class="hljs-string">                on_release:app.home()</span><br><span class="hljs-string">            ToggleButton:</span><br><span class="hljs-string">                group:&#x27;touch_mode&#x27;</span><br><span class="hljs-string">                state:&#x27;down&#x27;</span><br><span class="hljs-string">                text:&quot;pan&quot; </span><br><span class="hljs-string">                on_release:</span><br><span class="hljs-string">                    app.set_touch_mode(&#x27;pan&#x27;)</span><br><span class="hljs-string">                    self.state=&#x27;down&#x27;</span><br><span class="hljs-string">            ToggleButton:</span><br><span class="hljs-string">                group:&#x27;touch_mode&#x27;</span><br><span class="hljs-string">                text:&quot;zoom box&quot;  </span><br><span class="hljs-string">                on_release:</span><br><span class="hljs-string">                    app.set_touch_mode(&#x27;zoombox&#x27;)</span><br><span class="hljs-string">                    self.state=&#x27;down&#x27;                </span><br><span class="hljs-string">        MatplotFigure:</span><br><span class="hljs-string">            id:figure_wgt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">App</span>):<br>    lines = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.screen = Builder.load_string(KV)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.screen<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_start</span>(<span class="hljs-params">self, *args</span>):<br>        fig, ax1 = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>        ax1.plot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>], label=<span class="hljs-string">&#x27;line1&#x27;</span>)<br>        ax1.plot([<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>], label=<span class="hljs-string">&#x27;line2&#x27;</span>)<br><br>        <span class="hljs-variable language_">self</span>.screen.figure_wgt.figure = fig<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_touch_mode</span>(<span class="hljs-params">self, mode</span>):<br>        <span class="hljs-variable language_">self</span>.screen.figure_wgt.touch_mode = mode<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.screen.figure_wgt.home()<br><br><br>Test().run()<br></code></pre></td></tr></table></figure><blockquote><p>注：kivy_matplotlib_widget 包如果没有引入则会无法使用 MatplotFigure 组件，IDEA 可能因为代理的问题没能正确读取依赖。</p></blockquote><h4 id="对接-OpenCV">对接 OpenCV</h4><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install opencv-python<br></code></pre></td></tr></table></figure><p>编写如下程序即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> kivy.app <span class="hljs-keyword">import</span> App<br><span class="hljs-keyword">from</span> kivy.clock <span class="hljs-keyword">import</span> Clock<br><span class="hljs-keyword">from</span> kivy.graphics.texture <span class="hljs-keyword">import</span> Texture<br><span class="hljs-keyword">from</span> kivy.uix.image <span class="hljs-keyword">import</span> Image<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KivyCamera</span>(<span class="hljs-title class_ inherited__">Image</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capture, fps, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(KivyCamera, <span class="hljs-variable language_">self</span>).__init__(**kwargs)<br>        <span class="hljs-variable language_">self</span>.capture = capture<br>        Clock.schedule_interval(<span class="hljs-variable language_">self</span>.update, <span class="hljs-number">1.0</span> / fps)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, dt</span>):<br>        ret, frame = <span class="hljs-variable language_">self</span>.capture.read()<br>        <span class="hljs-keyword">if</span> ret:<br>            <span class="hljs-comment"># convert it to texture</span><br>            buf1 = cv2.flip(frame, <span class="hljs-number">0</span>)<br>            buf = buf1.tostring()<br>            image_texture = Texture.create(size=(frame.shape[<span class="hljs-number">1</span>], frame.shape[<span class="hljs-number">0</span>]), colorfmt=<span class="hljs-string">&#x27;bgr&#x27;</span>)<br>            image_texture.blit_buffer(buf, colorfmt=<span class="hljs-string">&#x27;bgr&#x27;</span>, bufferfmt=<span class="hljs-string">&#x27;ubyte&#x27;</span>)<br>            <span class="hljs-comment"># display image from the texture</span><br>            <span class="hljs-variable language_">self</span>.texture = image_texture<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CamApp</span>(<span class="hljs-title class_ inherited__">App</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build</span>(<span class="hljs-params">self</span>):<br>        video_path = <span class="hljs-string">&#x27;video.mp4&#x27;</span><br>        <span class="hljs-variable language_">self</span>.capture = cv2.VideoCapture(video_path)<br>        <span class="hljs-variable language_">self</span>.my_camera = KivyCamera(capture=<span class="hljs-variable language_">self</span>.capture, fps=<span class="hljs-number">30</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.my_camera<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_stop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># without this, app will not exit even if the window is closed</span><br>        <span class="hljs-variable language_">self</span>.capture.release()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    CamApp().run()<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://kivy.org/">Kivy 官网</a></p><p><a href="https://kivymd.readthedocs.io/en/latest/">KivyMD 官网</a></p><p><a href="https://github.com/mp-007/kivy_matplotlib_widget">kivy-matplotlib-widget 官方项目</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Ocean" scheme="https://wangqian0306.github.io/categories/Ocean/"/>
    
    
    <category term="Python" scheme="https://wangqian0306.github.io/tags/Python/"/>
    
    <category term="Kivy" scheme="https://wangqian0306.github.io/tags/Kivy/"/>
    
  </entry>
  
  <entry>
    <title>dive</title>
    <link href="https://wangqian0306.github.io/2024/dive/"/>
    <id>https://wangqian0306.github.io/2024/dive/</id>
    <published>2024-09-27T13:41:32.000Z</published>
    <updated>2025-01-08T02:56:21.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="dive">dive</h2><h3 id="简介">简介</h3><p>dive 是一个 Docker 工具，可以用来检索每个 Layer 中的内容。</p><h3 id="安装和使用方式">安装和使用方式</h3><ul><li>RHEL/CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DIVE_VERSION=$(curl -sL <span class="hljs-string">&quot;https://api.github.com/repos/wagoodman/dive/releases/latest&quot;</span> | grep <span class="hljs-string">&#x27;&quot;tag_name&quot;:&#x27;</span> | sed -E <span class="hljs-string">&#x27;s/.*&quot;v([^&quot;]+)&quot;.*/\1/&#x27;</span>)<br>curl -OL https://github.com/wagoodman/dive/releases/download/v<span class="hljs-variable">$&#123;DIVE_VERSION&#125;</span>/dive_<span class="hljs-variable">$&#123;DIVE_VERSION&#125;</span>_linux_amd64.rpm<br>rpm -i dive_<span class="hljs-variable">$&#123;DIVE_VERSION&#125;</span>_linux_amd64.rpm<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dive &lt;image&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注：之前一直对 GraalVM Native Image 的结构没有基础的认知，可以通过此工具查看具体容器的构成和目录情况。</p></blockquote><h3 id="参考资料">参考资料</h3><p><a href="https://github.com/wagoodman/dive">官方项目</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Container" scheme="https://wangqian0306.github.io/categories/Container/"/>
    
    
    <category term="Container" scheme="https://wangqian0306.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>Grafana Loki</title>
    <link href="https://wangqian0306.github.io/2024/loki/"/>
    <id>https://wangqian0306.github.io/2024/loki/</id>
    <published>2024-09-06T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Grafana-Loki">Grafana Loki</h2><h3 id="简介">简介</h3><p>Grafana 日志汇集的组件。在看 SpringOne 大会视频的时候了解到 Spring 对日志的处理方式。</p><h3 id="安装">安装</h3><h4 id="Docker">Docker</h4><p>使用如下命令即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mkdir</span> <span class="hljs-string">loki</span><br><span class="hljs-string">cd</span> <span class="hljs-string">loki</span><br><span class="hljs-string">wget</span> <span class="hljs-string">https://raw.githubusercontent.com/grafana/loki/v3.0.0/production/docker-compose.yaml</span> <span class="hljs-string">-O</span> <span class="hljs-string">docker-compose.yaml</span><br><span class="hljs-string">docker-compose</span> <span class="hljs-string">up</span> <span class="hljs-string">-d</span> <br></code></pre></td></tr></table></figure><h4 id="Kubernetes">Kubernetes</h4><p>在 Kubernets 上安装分成了如下种安装方式：</p><ul><li>monolithic 单体</li><li>scalable 弹性(支持每日数 TB)</li><li>microservice 微服务</li></ul><p>具体流程参照 <a href="https://grafana.com/docs/loki/latest/setup/install/helm/">官方文档</a></p><h5 id="Istio">Istio</h5><p>在 Istio 环境下需要进行 <a href="https://grafana.com/docs/loki/latest/setup/install/istio/">额外配置</a></p><h3 id="参考资料">参考资料</h3><p><a href="https://grafana.com/docs/loki/latest/">官方文档</a></p><p><a href="https://www.youtube.com/watch?v=TLnH7efQNd0&amp;list=PLDGkOdUX1Ujr9QOsM--ogwJAYu6JD48W7">视频教程</a></p><p><a href="https://github.com/jonatan-ivanov/teahouse">样例代码和配置</a></p><p><a href="https://www.youtube.com/watch?v=IB89ZmBslY4">Is Your JVM App Flying Blind? Unmask Issues With Observability Superpowers! (SpringOne 2024)</a></p><p><a href="https://www.youtube.com/watch?v=X7rODR2m63c&amp;t=1941s">Micrometer Mastery: Unleash Advanced Observability In Your JVM Apps (SpringOne 2024)</a></p><p><a href="http://research.google.com/archive/papers/dapper-2010-1.pdf">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a></p><p><a href="https://bigbully.github.io/Dapper-translation/">Dapper，大规模分布式系统的跟踪系统</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://wangqian0306.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Grafana" scheme="https://wangqian0306.github.io/tags/Grafana/"/>
    
    <category term="Loki" scheme="https://wangqian0306.github.io/tags/Loki/"/>
    
    <category term="Spring" scheme="https://wangqian0306.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Grafana Tempo</title>
    <link href="https://wangqian0306.github.io/2024/tempo/"/>
    <id>https://wangqian0306.github.io/2024/tempo/</id>
    <published>2024-09-06T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Grafana-Tempo">Grafana Tempo</h2><h3 id="简介">简介</h3><p>Grafana Tempo 是一个开源、易于使用且大规模的分布式跟踪后端。Tempo 允许您搜索跟踪、从 Span 生成指标，并将跟踪数据与日志和指标相关联。</p><h3 id="安装">安装</h3><h4 id="Kubernetes">Kubernetes</h4><p>具体流程参照 <a href="https://grafana.com/docs/tempo/latest/setup/helm-chart/">官方文档</a></p><h3 id="参考资料">参考资料</h3><p><a href="https://grafana.com/docs/tempo/latest/">官方网站</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://wangqian0306.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Grafana" scheme="https://wangqian0306.github.io/tags/Grafana/"/>
    
    <category term="Tempo" scheme="https://wangqian0306.github.io/tags/Tempo/"/>
    
  </entry>
  
  <entry>
    <title>Spring Modulith</title>
    <link href="https://wangqian0306.github.io/2024/modulith/"/>
    <id>https://wangqian0306.github.io/2024/modulith/</id>
    <published>2024-09-04T13:32:58.000Z</published>
    <updated>2025-01-13T02:27:42.915Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring-Modulith">Spring Modulith</h2><h3 id="简介">简介</h3><p>Spring Modulith 是一个工具包，用于构建领域驱动的模块化应用程序。Modulith 通过使用 ApplicationEvent 的方式来分离不同的程序模块。并且支持了如下事件的持久化记录：</p><ul><li>JPA</li><li>JDBC</li><li>MongoDB</li><li>Neo4j</li></ul><p>除了将事件写入数据库之外，还可以将数据写出到如下平台：</p><ul><li>Kafka</li><li>AMQP</li><li>JMS</li><li>AWS SQS</li><li>AWS SNS</li></ul><h3 id="使用">使用</h3><p>首先需要在 <a href="https://start.spring.io">https://start.spring.io</a> 上引入如下依赖：</p><ul><li>Spring Web</li><li>Spring Data JPA</li><li>MySQL</li><li>Spring Modulith</li></ul><blockquote><p>注：此处建议使用 Maven 管理依赖，Gradle 在单元测试部分有 Bug</p></blockquote><p>新建项目，然后创建 <code>order</code> 包，并在其中建立 <code>package-info.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.springframework.lang.NonNullApi<br><span class="hljs-keyword">package</span> com.xxx.xxx.order;<br></code></pre></td></tr></table></figure><p>创建 <code>OrderCompleted.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">import</span> org.jmolecules.event.types.DomainEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">OrderCompleted</span><span class="hljs-params">(UUID orderId)</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DomainEvent</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>OrderManagement.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisher;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderManagement</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationEventPublisher events;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">()</span> &#123;<br>        events.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderCompleted</span>(UUID.randomUUID()));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>OrderController.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderManagement orderManagement;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completeOrder</span><span class="hljs-params">()</span> &#123;<br>        orderManagement.complete();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>inventory</code> 包，并在其中建立 <code>package-info.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.springframework.lang.NonNullApi<br><span class="hljs-keyword">package</span> com.xxx.xxx.inventory;<br></code></pre></td></tr></table></figure><p>创建 <code>InventoryUpdated.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">InventoryUpdated</span><span class="hljs-params">(UUID orderId)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>InventoryManagement.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rainbowfish.motest.order.OrderCompleted;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisher;<br><span class="hljs-keyword">import</span> org.springframework.modulith.events.ApplicationModuleListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InventoryManagement</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(InventoryManagement.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationEventPublisher events;<br><br>    <span class="hljs-meta">@ApplicationModuleListener</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">(OrderCompleted event)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> event.orderId();<br>        LOG.info(<span class="hljs-string">&quot;Received order completion for &#123;&#125;.&quot;</span>, orderId);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        events.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InventoryUpdated</span>(orderId));<br>        LOG.info(<span class="hljs-string">&quot;Finished order completion for &#123;&#125;.&quot;</span>, orderId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>之后就可以在 <code>test</code> 目录下新建单元测试 <code>ModularityTests.java</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.modulith.core.ApplicationModules;<br><span class="hljs-keyword">import</span> org.springframework.modulith.docs.Documenter;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModularityTests</span> &#123;<br><br>    <span class="hljs-type">ApplicationModules</span> <span class="hljs-variable">modules</span> <span class="hljs-operator">=</span> ApplicationModules.of(Application.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">verifiesModularStructure</span><span class="hljs-params">()</span> &#123;<br>        modules.verify();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">createModuleDocumentation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Documenter</span>(modules).writeDocumentation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建 <code>ApplicationIntegrationTests.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">import</span> com.rainbowfish.motest.order.OrderManagement;<br><span class="hljs-keyword">import</span> com.rainbowfish.motest.inventory.InventoryUpdated;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.modulith.events.core.EventPublicationRegistry;<br><span class="hljs-keyword">import</span> org.springframework.modulith.test.EnableScenarios;<br><span class="hljs-keyword">import</span> org.springframework.modulith.test.Scenario;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@EnableScenarios</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationIntegrationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    OrderManagement orders;<br>    <span class="hljs-meta">@Autowired</span><br>    EventPublicationRegistry registry;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bootstrapsApplication</span><span class="hljs-params">(Scenario scenario)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        scenario.stimulate(() -&gt; orders.complete())<br>                .andWaitForStateChange(() -&gt; registry.findIncompletePublications(), Collection::isEmpty)<br>                .andExpect(InventoryUpdated.class)<br>                .toArrive();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>通过单元测试后可以编写 <code>test.http</code> 文件进行测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">###<br>POST http://localhost:8080/order<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://docs.spring.io/spring-modulith/reference/">官方文档</a></p><p><a href="https://github.com/joshlong/bootiful-spring-boot-2024">示例代码</a></p><p><a href="https://www.youtube.com/watch?v=ex7rnzIMmlk">Bootiful Spring Boot (SpringOne 2024)</a></p><p><a href="https://spring.io/blog/2024/11/24/bootiful-34-modulith">Bootiful Spring Boot 3.4: Spring Modulith</a></p><p><a href="https://github.com/spring-projects/spring-modulith/tree/main/spring-modulith-examples">官方样例</a></p><p><a href="https://www.youtube.com/watch?v=VGhg6Tfxb60">mplementing Domain Driven Design with Spring by Maciej Walkowiak @ Spring I/O 2024</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Spring" scheme="https://wangqian0306.github.io/categories/Spring/"/>
    
    
    <category term="Java" scheme="https://wangqian0306.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://wangqian0306.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>oha</title>
    <link href="https://wangqian0306.github.io/2024/oha/"/>
    <id>https://wangqian0306.github.io/2024/oha/</id>
    <published>2024-09-03T15:09:32.000Z</published>
    <updated>2025-01-08T02:56:21.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="oha">oha</h2><h3 id="简介">简介</h3><p>在看 Spring IO 会议中看到演示使用的网页测试工具，看着还可以。</p><h3 id="安装">安装</h3><p>使用如下命令即可安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/hatoo/oha/releases/download/v1.4.6/oha-linux-amd64<br><span class="hljs-built_in">mv</span> oha-linux-amd64 oha<br><span class="hljs-built_in">chmod</span> a+x oha<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> oha /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="简单使用">简单使用</h3><p>可以通过 nginx 容器来快速使用 oha</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br>docker run --<span class="hljs-built_in">rm</span> --name nginx-demo -p 8080:80 -d nginx<br>oha http://localhost:8080 -z 10s<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p><a href="https://github.com/hatoo/oha">官方项目</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://wangqian0306.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="oha" scheme="https://wangqian0306.github.io/tags/oha/"/>
    
  </entry>
  
</feed>
